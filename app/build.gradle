plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'com.example.moum'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.moum"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // debug 빌드 타입에 testCoverageEnabled 추가
            testCoverageEnabled true
        }
    }

    // 추가
    testOptions {
        //안드로이드 리소스 사용가능 + 메소드 미호출시 기본값 반환
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                destinationFile = layout.buildDirectory.file("jacoco/testDebugUnitTest.exec").get().asFile
                excludes = ['jdk.internal.*']
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled true
    }
}

// 테스트 후에 JaCoCo 리포트를 생성
tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn(tasks.named("testDebugUnitTest"))

    reports {
        xml.required.set(true)
        //xml.outputLocation.set(layout.buildDirectory.file("jacoco/index.xml"))

        csv.required.set(false)

        html.required.set(true)
        //html.outputLocation.set(layout.buildDirectory.dir("jacoco/html"))
    }

    // 커버리지 제외 파일
    def fileFilter = ['**/dto/**',
                      '**/event/**',
                      '**/*InitData*',
                      '**/*Application*',
                      '**/exception/**',
                      '**/service/alarm/**',
                      '**/aop/**',
                      '**/config/**',
                      '**/MemberRole*']

    sourceDirectories.setFrom(files([layout.projectDirectory.dir("src/main/java").asFile]))
    classDirectories.setFrom(fileTree(dir: layout.buildDirectory.dir("intermediates/javac/debug").get().asFile, excludes: fileFilter))
    executionData.setFrom(fileTree(dir: layout.buildDirectory.dir("jacoco").get().asFile, includes: ['testDebugUnitTest.exec']))
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}
