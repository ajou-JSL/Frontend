name: Build and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      use_version_file:
        description: "Use version.properties file for versioning"
        required: true
        default: "false"

jobs:
  build:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Generate Keystore file from Github Secrets
        run: |
          mkdir -p ./app/keystore
          echo "$KEYSTORE" > ./app/keystore/keystore.b64
          base64 -d ./app/keystore/keystore.b64 > ./app/keystore/MOUMkey2.jks
        env:
          KEYSTORE: ${{ secrets.APP_KEYSTORE_BASE64 }}

      - name: Verify Keystore File Path
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing files in ./app/keystore/"
          ls -l ./app/keystore/
          if [ ! -f ./app/keystore/MOUMkey2.jks ]; then
            echo "Keystore file is missing!"
            exit 1
          fi

      - name: Build APK with Signing
        run: ./gradlew assembleRelease --info
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Verify APK Signing
        run: jarsigner -verify -verbose -certs app/build/outputs/apk/release/app-release.apk

      - name: Find APK Path
        id: find_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/release/ -name "*.apk" | head -n 1)
          echo "APK path: $APK_PATH"
          echo ::set-output name=apk_path::$APK_PATH

      - name: Determine version
        id: determine_version
        run: |
          if [ "${{ github.event.inputs.use_version_file }}" == "true" ]; then
            # Use version.properties if triggered manually with specific input
            VERSION=$(grep 'VERSION_NAME' version.properties | cut -d'=' -f2)
          else
            # Use automatic version bump logic
            latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            major="${parts[0]}"
            minor="${parts[1]}"
            patch="${parts[2]}"

            if [ "$patch" -eq 9 ]; then
              patch=0
              minor=$((minor+1))
            else
              patch=$((patch+1))
            fi

            if [ "$minor" -eq 10 ]; then
              minor=0
              major=$((major+1))
            fi

            VERSION="v$major.$minor.$patch"
          fi

          echo "Determined version: $VERSION"
          echo ::set-output name=version::$VERSION

      - name: Push new tag to GitHub
        if: always()  # 수동 실행 또는 자동 실행 모두 태그를 생성
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.determine_version.outputs.version }}
          git push origin ${{ steps.determine_version.outputs.version }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.determine_version.outputs.version }}
          name: "MOUM-${{ steps.determine_version.outputs.version }}"
          body: "✨ 음악인들을 잇는 커뮤니티 플랫폼 어플리케이션, MOUM:모音\nDownload 'app-release.apk' and install it in android device.\n\nNew release based on version ${{ steps.determine_version.outputs.version }}."
          draft: false
          prerelease: false
          artifacts: ${{ steps.find_apk.outputs.apk_path }}
          replacesArtifacts: true
          skipIfReleaseExists: false

